<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CodeShards</title><link href="http://127.0.0.1:8000/" rel="alternate"></link><link href="http://127.0.0.1:8000/feeds/all.atom.xml" rel="self"></link><id>http://127.0.0.1:8000/</id><updated>2014-01-22T16:02:00-05:00</updated><entry><title>The software must be simple and focused</title><link href="http://127.0.0.1:8000/the-software-must-be-simple-and-focused.html" rel="alternate"></link><updated>2014-01-22T16:02:00-05:00</updated><author><name>Ozkar L. Garcell</name></author><id>tag:127.0.0.1:8000,2014-01-22:the-software-must-be-simple-and-focused.html</id><summary type="html">&lt;p&gt;Oscar Wilde said: &lt;em&gt;I am so clever that sometimes I don't understand a single word of what I am saying.&lt;/em&gt; Sometimes many softwares causes this effect in us. For instance, there is a lot of softwares plagued with colors, buttons, links, features,stupid clips dancing... We need products smarters, we need sofware made-to-measure. We need the beautiful of simplicity, avoiding the learning curve, we need the software take care of the busy work and let us focused in our ideas.&lt;/p&gt;
&lt;p&gt;These ideas has been misunderstood by many developers and software companies. The age of complex software has come to it end. Douglas McIlroy philosophy is: &lt;em&gt;write programs that do one thing and do it well&lt;/em&gt;, so, &lt;em&gt;simple is better than complex&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let's begin:
- more code equal more bugs
- more code doesn't means more functionality.
- more features doesn't make your software better.
- if you can't explain your software in one sentence, there is a problem.&lt;/p&gt;
&lt;p&gt;These are practices I consider the &lt;em&gt;best&lt;/em&gt; approache in software development, instead of waste time and brain-fuel in &lt;em&gt;huge&lt;/em&gt; and useless programs.&lt;/p&gt;
&lt;p&gt;I have a few words for you: pragmatism, pragmatism, pragmatism...&lt;/p&gt;
</summary><category term="ideas"></category></entry><entry><title>Keep it Simple, Stupid!</title><link href="http://127.0.0.1:8000/keep-it-simple-stupid.html" rel="alternate"></link><updated>2014-01-21T16:39:00-05:00</updated><author><name>Ozkar L. Garcell</name></author><id>tag:127.0.0.1:8000,2014-01-21:keep-it-simple-stupid.html</id><summary type="html">&lt;p&gt;After several days working on it, here it is! &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/"&gt;Pelican&lt;/a&gt; !! So, why I use an static blog instead of a popular blog system? 'cause I love &lt;a class="reference external" href="https://github.com/"&gt;GitHub&lt;/a&gt; and I love use &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; as text editor(not IDE) and the simplicity of an static blog is awesome. Work with static blogs reminds me my humble origings, where there's not &lt;a class="reference external" href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, or &lt;a class="reference external" href="http://djangoproject.com/"&gt;Django&lt;/a&gt; or the &lt;em&gt;allmighty&lt;/em&gt; &lt;a class="reference external" href="http://www.jetbrains.com/"&gt;PyCharm&lt;/a&gt;. Just HTML, reStructuredText and a few &lt;a class="reference external" href="http://fjavieralba.com/pelican-a-static-blog-generator-for-pythonistas.html"&gt;commands&lt;/a&gt; makes you feel like God, because you always know how your blog works.&lt;/p&gt;
</summary><category term="pelican"></category><category term="web"></category></entry></feed>